# Gitignore for APCS Lowell repositories

# Ignore compiled processing class files
build-tmp/






SpaceShip serenity;
Stars [] sky;
ArrayList <Asteroid> roids = new ArrayList <Asteroid>();
ArrayList <Bullet> bob = new ArrayList <Bullet>();
public void setup() 
{
  size(800,800);
  serenity = new SpaceShip();
  sky = new Stars[100];
  for(int i = 0; i < sky.length; i++)
    {
      sky[i] = new Stars();
    }
    for(int i = 0; i < 20; i++)
    {
      roids.add(new Asteroid());
    }

}
public void draw() 
{
  background(0);
  
  for(int i = 0; i < sky.length; i++)
    {
      sky[i].show();
    }

  for(int i = 0; i < roids.size(); i++)
  {
    roids.get(i).show();
    roids.get(i).move();
  }


  for (int i = 0; i < bob.size(); i++)
  {
    bob.get(i).show();
    bob.get(i).move();
  }
  for (int i = 0; i < bob.size(); i++)
  {
    for (int j = 0; j < roids.size(); j++)
    {
      if(dist(bob.get(i).getX(), bob.get(i).getY(), roids.get(j).getX(), roids.get(j).getY()) < 20)
        roids.remove(j);
    }
  }
  serenity.show();
  serenity.move();


}
 
public void keyPressed()
{
  if (key == ' ')
  {
    bob.add(new Bullet(serenity));
  }
  if (key == 'w')
  {
    serenity.accelerate(.2);
  }
  if (key == 's')
  {
    serenity.accelerate(-.2);
  }
  if (key == 'a')
  {
    serenity.rotate(-12);
  }
  if (key == 'd')
  {
    serenity.rotate(12);
  }
  if (key == 'h')
  {
    serenity.setX((int)(Math.random()*800));
    serenity.setY((int)(Math.random()*800));
    serenity.setDirectionX(0);
    serenity.setDirectionY(0);
    serenity.setPointDirection((int)(Math.random()*360));
  }
}





class Asteroid extends Floater
{
    
    private int aRotate;
    public void setX(int x) {myCenterX = x;} 
    public int getX() {return (int)myCenterX;}   
    public void setY(int y) {myCenterY = y;}   
    public int getY(){return (int)myCenterY;}   
    public void setDirectionX(double x) {myDirectionX = x;} 
    public double getDirectionX() {return myDirectionX;}  
    public void setDirectionY(double y) {myDirectionY = y;}
    public double getDirectionY() {return myDirectionY;}
    public void setPointDirection(int degrees) {myPointDirection = degrees;}
    public double getPointDirection() {return myPointDirection;}

    public Asteroid()
    {
    myColor = color(81, 74, 74);
      
      corners = 14;
      xCorners = new int[corners];
      yCorners = new int[corners];
      xCorners[0] = -1;
      yCorners[0] = 7;
      xCorners[1] = 2;
      yCorners[1] = 2;
      xCorners[2] = 4;
      yCorners[2] = 8;
      xCorners[3] = 7;
      yCorners[3] = 6;
      xCorners[4] = 10;
      yCorners[4] = 4;
      xCorners[5] = 13;
      yCorners[5] = -1;
      xCorners[6] = 14;
      yCorners[6] = -5;
      xCorners[7] = 10;
      yCorners[7] = -12;
      xCorners[8] = 5;
      yCorners[8] = -12;
      xCorners[9] = 2;
      yCorners[9] = -15;
      xCorners[10] = -4;
      yCorners[10] = -13;
      xCorners[11] = -9;
      yCorners[11] = -14;
      xCorners[12] = -13;
      yCorners[12] = -12;
      xCorners[13] = -15;
      yCorners[13] = -6;
      myCenterX = (int)(Math.random()*800);
      myCenterY = (int)(Math.random()*800);
      aRotate = (int)((Math.random()*8)-3);
    
  
    }
    public void move()
    {
      rotate(aRotate);
      super.move();
      myCenterX += Math.cos(aRotate);
      myCenterY += Math.sin(aRotate);
    }

}






class Bullet extends Floater
{
  public void setX(int x) {myCenterX = x;} 
  public int getX() {return (int)myCenterX;}   
  public void setY(int y) {myCenterY = y;}   
  public int getY(){return (int)myCenterY;}   
  public void setDirectionX(double x) {myDirectionX = x;} 
  public double getDirectionX() {return myDirectionX;}  
  public void setDirectionY(double y) {myDirectionY = y;}
  public double getDirectionY() {return myDirectionY;}
  public void setPointDirection(int degrees) {myPointDirection = degrees;}
  public double getPointDirection() {return myPointDirection;}

  public Bullet(SpaceShip gunner)
  {
  	myCenterX = gunner.getX();
  	myCenterY = gunner.getY();
  	myPointDirection = gunner.getPointDirection();
  	double dRadians = myPointDirection*(Math.PI/180);
  	myDirectionX = 5 * Math.cos(dRadians) + gunner.getDirectionX();
  	myDirectionY = 5 * Math.sin(dRadians) + gunner.getDirectionY();

  }

  public void show()
  {
  	stroke(180, 244, 132);
  	fill(22, 196, 0);
  	ellipse((float)myCenterX, (float)myCenterY, 8, 8);
  }
  public void move()
  {
  	myCenterX += myDirectionX;    
    myCenterY += myDirectionY;
  }
}















